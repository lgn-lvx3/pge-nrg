import { useState, useEffect } from "react";
import { Modal, Button } from "react-daisyui";

interface AnalyzeUsageModalProps {
	isOpen: boolean;
	onClose: () => void;
}

interface AnalysisData {
	summary: string;
	recommendations: string[];
	estimatedSavings: string;
	entries: number;
}

const Disclaimer = () => {
	return (
		<div className="alert alert-ghost mb-4">
			<span className="text-xs">
				This analysis is generated by AI and may contain inaccuracies. Please
				consult with an energy professional for specific recommendations.
			</span>
		</div>
	);
};

export function AnalyzeUsageModal({ isOpen, onClose }: AnalyzeUsageModalProps) {
	const [isLoading, setIsLoading] = useState(false);
	const [analysisData, setAnalysisData] = useState<AnalysisData | null>(null);
	const [error, setError] = useState<string | null>(null);

	useEffect(() => {
		if (isOpen) {
			fetchAnalysisData();
		}
	}, [isOpen]);

	const fetchAnalysisData = async () => {
		setIsLoading(true);
		setError(null);
		try {
			// Simulating API call with sample data
			// await new Promise((resolve) => setTimeout(resolve, 1500)); // Simulate loading
			const response = await fetch("/api/recommendations", {
				method: "GET",
			});

			if (!response.ok) {
				setError("Failed to analyze usage data");
				setIsLoading(false);
				return;
			}

			const { data } = await response.json();

			setAnalysisData(data as AnalysisData);
		} catch (err) {
			setError("Failed to analyze usage data");
			console.error("Analysis error:", err);
		} finally {
			setIsLoading(false);
		}
	};

	return (
		<Modal open={isOpen} onClose={onClose} backdrop>
			<Modal.Header className="font-bold text-2xl">
				{isLoading ? "Analyzing..." : "AI Analysis Results"}
			</Modal.Header>
			<Modal.Body>
				{isLoading ? (
					<div className="flex justify-center items-center h-32">
						<div className="loading loading-spinner loading-lg" />
					</div>
				) : error ? (
					<div className="text-error">{error}</div>
				) : analysisData ? (
					<>
						<Disclaimer />
						<div className="space-y-4">
							<div className="text-lg font-semibold">
								Summary
								<div className="text-sm text-gray-500 mt-1">
									{analysisData.entries} Entries Analyzed
								</div>
							</div>
							<p>{analysisData.summary}</p>

							<div className="text-lg font-semibold mt-4">Recommendations</div>
							<ol className="pl-5 space-y-2 list-decimal">
								{analysisData.recommendations.map((rec) => (
									<li key={rec.substring(0, 20)}>{rec}</li>
								))}
							</ol>

							<div className="text-lg font-semibold mt-4">
								Estimated Savings
							</div>
							<p>{analysisData.estimatedSavings}</p>
						</div>
					</>
				) : null}
			</Modal.Body>
			<Modal.Actions>
				<Button onClick={onClose}>Close</Button>
			</Modal.Actions>
		</Modal>
	);
}
